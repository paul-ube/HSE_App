/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hse_application;

import emiratesid.ae.exceptions.MiddlewareException;
import emiratesid.ae.publicdata.CardHolderPublicData;
import emiratesid.ae.publicdata.PublicDataFacade;
import emiratesid.ae.readersmgt.CardTypeEnum;
import emiratesid.ae.readersmgt.PCSCReader;
import emiratesid.ae.readersmgt.ReaderManagement;
import emiratesid.ae.sm.modules.SecureMessagingModulesFactory;
import emiratesid.ae.utils.Utils;
import hse_application.functions.DBConnect;
import static hse_application.functions.TitleCaseConversion.TitleCaseConversion;
import static hse_application.functions.tbl_function.tbl_function;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Frame;
import java.awt.Image;
import java.util.List;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.ReportContext;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.export.ExporterConfiguration;
import net.sf.jasperreports.export.ExporterInput;
import net.sf.jasperreports.export.ExporterOutput;
import net.sf.jasperreports.export.ReportExportConfiguration;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
//import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.openide.util.Exceptions;

/**
 *
 * @author OPTIPLEX
 */
public class attendanceClass extends javax.swing.JDialog {
    
    private PCSCReader reader = null;
    private ReaderManagement readerMgr;
    
    SecureMessagingModulesFactory factory = null;
    public boolean isContactlessReader=false;

    DefaultTableModel mod;
    DefaultTableModel students_tbl;
    private PreparedStatement pstmt = null;
    private ResultSet rs = null;
//    private Statement stmt = null;
    private Connection con;
    private String title;
    private String temp_dob;
    private DefaultListModel dlm;
    
    int xMouse;
    int yMouse;
    
    Thread th = null;
    
    /**
     * Creates new form attendanceClass
     * @param owner
     */
    public attendanceClass(Frame owner) {
        super(owner);
        con = DBConnect.ConnDB();
        dlm = new DefaultListModel();
        initComponents();

        GetTrainings();
        tbl_function(tbl_listofstudents);
        
        
//        AutoCompleteDecorator.decorate(txt_courses);
        AutoCompleteDecorator.decorate(cmb_trainer);
        AutoCompleteDecorator.decorate(cmb_trainingReference);
        tbl_function(tbl_listofstudents);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StatusGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        header = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cmb_trainer = new javax.swing.JComboBox<String>();
        cmb_trainingReference = new javax.swing.JComboBox<String>();
        txt_company = new javax.swing.JTextField();
        cmb_venue = new javax.swing.JComboBox<String>();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_dates1 = new javax.swing.JList<String>();
        jLabel9 = new javax.swing.JLabel();
        radio_pending = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        txt_courses = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cmb_training_type = new javax.swing.JComboBox<String>();
        txt_venue = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txt_trainer = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        label = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        txt_time = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_listofstudents = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_dates = new javax.swing.JList<String>();
        delete = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        label1 = new javax.swing.JLabel();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jLabel12 = new javax.swing.JLabel();
        txt_startDate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jPanel6.setBackground(new java.awt.Color(234, 238, 243));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(11, 68, 124)));

        header.setBackground(new java.awt.Color(11, 68, 124));
        header.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(11, 68, 124)));
        header.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/hse_images/Backgrounds/printattendance.png"))); // NOI18N
        jLabel8.setPreferredSize(new java.awt.Dimension(156, 39));
        jLabel8.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel8MouseDragged(evt);
            }
        });
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel8MousePressed(evt);
            }
        });
        header.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 1, 1189, -1));

        jPanel4.setBackground(new java.awt.Color(234, 238, 243));
        jPanel4.setPreferredSize(new java.awt.Dimension(655, 598));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(47, 47, 47));
        jLabel2.setText("Reference No.");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(47, 47, 47));
        jLabel3.setText("Course Title:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(47, 47, 47));
        jLabel4.setText("Trainer's Name:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(47, 47, 47));
        jLabel6.setText("Company Name:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(47, 47, 47));
        jLabel7.setText("Venue");

        cmb_trainer.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        cmb_trainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_trainerActionPerformed(evt);
            }
        });

        cmb_trainingReference.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        cmb_trainingReference.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmb_trainingReferenceFocusGained(evt);
            }
        });
        cmb_trainingReference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_trainingReferenceActionPerformed(evt);
            }
        });

        txt_company.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N

        cmb_venue.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        cmb_venue.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "HSEPro Fujairah, UAE", "HSEPro Dubai, UAE", "HSEPro Abu Dhabi, UAE", "Other" }));
        cmb_venue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_venueActionPerformed(evt);
            }
        });

        jScrollPane3.setForeground(new java.awt.Color(47, 47, 47));

        list_dates1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jScrollPane3.setViewportView(list_dates1);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(47, 47, 47));
        jLabel9.setText("Status");

        radio_pending.setBackground(new java.awt.Color(234, 238, 243));
        StatusGroup.add(radio_pending);
        radio_pending.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        radio_pending.setSelected(true);
        radio_pending.setText("Pending");
        radio_pending.setOpaque(false);
        radio_pending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_pendingActionPerformed(evt);
            }
        });

        jRadioButton2.setBackground(new java.awt.Color(234, 238, 243));
        StatusGroup.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jRadioButton2.setText("Finished");
        jRadioButton2.setOpaque(false);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        txt_courses.setEditable(false);
        txt_courses.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        txt_courses.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(47, 47, 47));
        jLabel11.setText("Type");

        cmb_training_type.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        cmb_training_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Corporate", "Individual" }));
        cmb_training_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_training_typeActionPerformed(evt);
            }
        });

        txt_venue.setEditable(false);
        txt_venue.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Segoe UI", 2, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(47, 47, 47));
        jLabel13.setText("If other, pls specify");

        txt_trainer.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Segoe UI", 2, 11)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(47, 47, 47));
        jLabel14.setText("If other, pls specify");

        label.setFont(new java.awt.Font("Segoe UI Semibold", 0, 19)); // NOI18N
        label.setForeground(new java.awt.Color(32, 33, 36));
        label.setText("Training Info");

        label2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 19)); // NOI18N
        label2.setForeground(new java.awt.Color(32, 33, 36));
        label2.setText("Other Info");

        txt_time.setEditable(false);
        txt_time.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(47, 47, 47));
        jLabel17.setText("Time:");

        jButton1.setForeground(new java.awt.Color(47, 47, 47));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/edit_button.png"))); // NOI18N
        jButton1.setMnemonic('e');
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusPainted(false);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(label2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmb_venue, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_training_type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmb_trainingReference, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txt_company)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_venue))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(txt_courses)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(radio_pending)
                                        .addGap(38, 38, 38)
                                        .addComponent(jRadioButton2))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_trainer, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_time)
                                    .addComponent(cmb_trainer, 0, 449, Short.MAX_VALUE))))
                        .addGap(24, 24, 24))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(label)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radio_pending)
                            .addComponent(jRadioButton2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cmb_training_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmb_trainingReference, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_courses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1))
                .addGap(13, 13, 13)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmb_venue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_venue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(20, 20, 20)
                .addComponent(label2)
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmb_trainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txt_trainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_company, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(13, 13, 13)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txt_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(234, 238, 243));
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tbl_listofstudents.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tbl_listofstudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student No.", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_listofstudents.setToolTipText("This table displays the list of students that requested this training");
        tbl_listofstudents.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tbl_listofstudents.setRowHeight(27);
        tbl_listofstudents.setShowVerticalLines(false);
        tbl_listofstudents.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbl_listofstudents);
        if (tbl_listofstudents.getColumnModel().getColumnCount() > 0) {
            tbl_listofstudents.getColumnModel().getColumn(0).setResizable(false);
            tbl_listofstudents.getColumnModel().getColumn(0).setPreferredWidth(200);
            tbl_listofstudents.getColumnModel().getColumn(1).setResizable(false);
            tbl_listofstudents.getColumnModel().getColumn(1).setPreferredWidth(500);
        }

        jLabel16.setFont(new java.awt.Font("Segoe UI Semibold", 0, 19)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(32, 33, 36));
        jLabel16.setText("List of Students");

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 0));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/DefaultButtons/PrintAttendanceDefault.png"))); // NOI18N
        jButton6.setBorder(null);
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.setFocusPainted(false);
        jButton6.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/ClickedButtons/print.png"))); // NOI18N
        jButton6.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/HoverButtons/Hover Button.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/DefaultButtons/Cancel Default.png"))); // NOI18N
        jButton7.setBorder(null);
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton7.setFocusPainted(false);
        jButton7.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/ClickedButtons/cancelclicked.png"))); // NOI18N
        jButton7.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/HoverButtons/cancelhover.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        list_dates.setFont(new java.awt.Font("Segoe UI Semibold", 0, 13)); // NOI18N
        jScrollPane2.setViewportView(list_dates);

        delete.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        delete.setForeground(new java.awt.Color(51, 51, 51));
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/DefaultButtons/removedatedefault.png"))); // NOI18N
        delete.setBorder(null);
        delete.setBorderPainted(false);
        delete.setContentAreaFilled(false);
        delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/ClickedButtons/removedateclicked.png"))); // NOI18N
        delete.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/hse_application/Icons/HoverButtons/removedatehover.png"))); // NOI18N
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(47, 47, 47));
        jLabel10.setText("List of Dates:");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(93, 92, 96));
        jLabel15.setText("Kindly put the dates in chronological order");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(47, 47, 47));
        jLabel5.setText("Start Date:");

        label1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 19)); // NOI18N
        label1.setForeground(new java.awt.Color(32, 33, 36));
        label1.setText("Session Info");

        jXDatePicker1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXDatePicker1ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(47, 47, 47));
        jLabel12.setText("Subsequent Dates:");

        txt_startDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_startDate.setForeground(new java.awt.Color(47, 47, 47));
        txt_startDate.setText("Start Date");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                    .addComponent(jButton7)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton6))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(delete)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                                        .addComponent(jXDatePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(txt_startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addGap(34, 34, 34))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(label1)
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel16)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    
    private void GetTrainings(){
        try{
            String trainingStatus;
            
            if (radio_pending.isSelected()){
                trainingStatus = "P";
            }else{
                trainingStatus = "F";
            }
            
//            DefaultComboBoxModel model = (DefaultComboBoxModel) cmb_trainingReference.getModel();
            Vector v = new Vector();
//            if (cmb_trainingReference.getItemCount()!=0){
//                cmb_trainingReference.removeAllItems();
//            }
  
            String query_trainingReference = "SELECT training_id as 'trainID'"
                    + " FROM tbl_training"
                    + " WHERE training_status = '"+trainingStatus+"'"
                    + " ORDER BY training_id DESC";
                
            pstmt = con.prepareStatement(query_trainingReference);
            rs = pstmt.executeQuery();
            while(rs.next()){
                    String reference = rs.getString("trainID");

                    v.add(reference);

                }
            cmb_trainingReference.setModel(new DefaultComboBoxModel(v));
            cmb_trainingReference.setSelectedIndex(0);
            
//                RefreshComboBox();    

            
        }catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    
    private void RefreshTable(){
        try {
            String code = cmb_trainingReference.getSelectedItem().toString();  // get the training code
            DefaultTableModel table = (DefaultTableModel)tbl_listofstudents.getModel();
            table.setRowCount(0);
            
            String query = "SELECT b.student_fullname name, b.student_number number FROM tbl_student b"
                    + " INNER JOIN tbl_training_student a"
                    + " ON a.fk_student_id = b.student_id"
                    + " WHERE fk_training_id = '"+code+"'"
                    + " ORDER BY name";
                  
            pstmt=con.prepareStatement(query);
            rs = pstmt.executeQuery();
            while(rs.next()){
                String studentNumber = (rs.getString("number"));
                String studentName = TitleCaseConversion(rs.getString("name"));
                
                String [] data = {studentNumber, studentName};
                table.addRow(data);
                
            }
        } catch (SQLException ex) {
            Logger.getLogger(attendanceClass.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void RefreshComboBox(){
        try{

            
            cmb_trainer.removeAllItems();  //clear all items first
            txt_courses.setText("");
            
            
            
            String code = cmb_trainingReference.getSelectedItem().toString();
            if (code.isEmpty()){
                return;
            }
            // Fill up the combobox of trainer from the db
//            String query_trainers = "SELECT a.user_fullname FROM tbl_user a "
//                    + "INNER JOIN tbl_training b "
//                    + "ON a.user_id = b.training_trainer ";
//                    + "WHERE training_id = '"+code+"'";

            String query_trainers = "SELECT DISTINCT a.user_fullname trainer FROM tbl_user a"
                        + " WHERE a.user_type = 'Trainer'";

            pstmt = con.prepareStatement(query_trainers);
            rs = pstmt.executeQuery();
            
            cmb_trainer.setEnabled(true);
            cmb_trainer.addItem("Other");
            
            while(rs.next()){
                cmb_trainer.addItem(rs.getString("trainer"));
            }
            
            // check if there is a selected trainer already
            String getSelectedTrainer = "SELECT a.user_fullname FROM tbl_user a "
                    + "INNER JOIN tbl_training b "
                    + "ON a.user_id = b.training_trainer "
                    + "WHERE training_id = '"+code+"'";
            pstmt = con.prepareStatement(getSelectedTrainer);
            rs = pstmt.executeQuery();
            
            if (rs.next()){
                cmb_trainer.setSelectedItem(rs.getString("user_fullname"));
            }
                    
            
            
            
//            
//            if(!rs.next()){  //if there are no assigned trainer
//                cmb_trainer.setEnabled(true);
//                cmb_trainer.addItem("Other");
//                String getTrainers = "SELECT DISTINCT a.user_fullname trainer FROM tbl_user a"
//                        + " WHERE a.user_type = 'Trainer'";
//                pstmt=con.prepareStatement(getTrainers);
//                rs = pstmt.executeQuery();
//                
//                while (rs.next()){
//                    cmb_trainer.addItem(rs.getString("trainer")); // get all the trainers
//                }
//                cmb_trainer.setSelectedIndex(0);
// 
//            }else{
//                String trainer = rs.getString("user_fullname");
//                cmb_trainer.addItem(trainer);
////                cmb_trainer.setEnabled(false);
//            }
            
            //fill up the combobox of courses from the db
            String query_course = "SELECT a.course_name course FROM tbl_course a"
                    + " INNER JOIN tbl_training b"
                    + " ON a.course_id = b.fk_course_id"
                    + " WHERE b.training_id = '"+code+"'";
            
            pstmt = con.prepareStatement(query_course);
            rs = pstmt.executeQuery();
            
            while(rs.next()){
                txt_courses.setText(rs.getString("course"));
            }
            RefreshTable();
            
            
            //Entered 15.03.19 
            // Add the dates to the list of dates
            list_dates.setModel(dlm);
            
            //clear the list of dates first
            dlm.removeAllElements();

            String query_trainingReference = "SELECT training_date as 'date'"
                    + " FROM tbl_training"
                    + " WHERE training_id = '"+code+"'";
                
            pstmt = con.prepareStatement(query_trainingReference);
            rs = pstmt.executeQuery();
            while(rs.next()){

                    String date = rs.getString("date");
   
                    DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    Date theDate = (Date)formatter.parse(date);
                    SimpleDateFormat newFormat = new SimpleDateFormat("yyyy-MMM-dd");
                    String finalDate = newFormat.format(theDate);
                    
                    System.out.println(theDate);
                    
                    txt_startDate.setText(finalDate);

                    dlm.addElement(finalDate);
                }

            
            
   
        }catch (SQLException e){
            e.printStackTrace();
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    
    public void setReaderManager(ReaderManagement homeReader){
        readerMgr = homeReader;
    }
    
    
//    private void initialize(){
//        try{
//            
//
//            
//            
////            boolean isCardConnected = selectedReader.isConnected();
////            boolean isContactless;
////        
////            if(isCardConnected)
////                isContactless = selectedReader.isContactless();
////            
////            if(!isCardConnected)
////                selectedReader.connect(readerMgr. Context);
//            
//            
////            PCSCReader[] readers = readerMgr.getReaders();
//
//            // check if there is a connected card reader
//            if(readerMgr.getReaders()==null || readerMgr.getReaders().length == 0){
//                JOptionPane.showMessageDialog(null,"There is no PCSC readers found.", "NO PCSC Readers", JOptionPane.ERROR_MESSAGE);
//                //return;
//            }else{
//                // Get the first reader regardless of how many
//                String theReader = readerMgr.getReaders()[0].getReaderName();
//
//                reader = readerMgr.selectReaderByName(theReader);
////                System.out.println(selectedReader.getReaderName());
//                boolean validCard = false;  //variable to check if UAE or UAE test card
//
//            }
////            System.out.println("Disconnecting all readers...");
////            readerMgr.disconnectAllReaders();
////            readerMgr.closeContext();
//            
//        } catch (Exception ex){
//            ex.printStackTrace();
//        }
//
//    }
    
    
    
    private void cmb_trainingReferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_trainingReferenceActionPerformed
        
        txt_courses.setEditable(false);
        RefreshComboBox();
    }//GEN-LAST:event_cmb_trainingReferenceActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

    }//GEN-LAST:event_formComponentShown

    
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int x = list_dates.getSelectedIndex();
        
        int y = dlm.getSize();
        if (x<0 || x>y){
            JOptionPane.showMessageDialog(this, "Please select date to Delete");
        }else{
            
            dlm.remove(x);
        }
        
    }//GEN-LAST:event_deleteActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        GetTrainings();
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void radio_pendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_pendingActionPerformed
        GetTrainings();
    }//GEN-LAST:event_radio_pendingActionPerformed

    private void cmb_trainingReferenceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmb_trainingReferenceFocusGained

    }//GEN-LAST:event_cmb_trainingReferenceFocusGained

    private void cmb_training_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_training_typeActionPerformed
        if (cmb_training_type.getSelectedIndex()==0){
            txt_time.setText("");
            txt_time.setEditable(false);
            txt_company.setEditable(true);
        }else{
            txt_time.setEditable(true);
            txt_company.setText("");
            txt_company.setEditable(false);
        }
    }//GEN-LAST:event_cmb_training_typeActionPerformed

    private void cmb_venueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_venueActionPerformed
        if (cmb_venue.getSelectedItem().equals("Other")){
            txt_venue.setEditable(true);
        }else{
            txt_venue.setEditable(false);
            txt_venue.setText("");
        }
    }//GEN-LAST:event_cmb_venueActionPerformed

    private void cmb_trainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_trainerActionPerformed
//        if (cmb_trainer.getSelectedItem().equals("Other") || cmb_trainer.getSelectedIndex() < 0){
//            txt_trainer.setEditable(true);
//        }else{
//            txt_trainer.setEditable(false);
//        }
    }//GEN-LAST:event_cmb_trainerActionPerformed

    private void jXDatePicker1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXDatePicker1ActionPerformed
        if (jXDatePicker1.getDate()==null){
            JOptionPane.showMessageDialog(this, "Please select date");
        }else{
            list_dates.setModel(dlm);
        
            //instantiate the date formatter
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MMM-dd");

            // get and format the date
            String theDate = sdf.format(jXDatePicker1.getDate());

            //check if there are similar dates
            int size = dlm.getSize();

            for(int i = 0; i<size; i++){
               String check = dlm.getElementAt(i).toString();

               if (check.equals(theDate)){ // check if the value is equals the date...
                   JOptionPane.showMessageDialog(this, 
                           "date already added to the list", "Error", 
                           JOptionPane.ERROR_MESSAGE, null);
                   return;
               }
            }
            // Add the date to the list
            dlm.addElement(theDate);

            jXDatePicker1.setDate(null);
        }
    }//GEN-LAST:event_jXDatePicker1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            this.dispose();
            con.close();
            System.out.println("DB Connection Closed");
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        th = new Thread(new PrintThread());
        th.start();
        
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txt_courses.setEditable(true);
        txt_courses.setEnabled(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_jLabel8MousePressed

    private void jLabel8MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_jLabel8MouseDragged
    
    class PrintThread implements Runnable{
        public PrintThread(){
            
        }
        
        public void run(){
            Print1Report();
        }
    }
    
    private void Print1Report(){
        try{
            
            //make the wait cursor
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            
            DefaultTableModel hello = (DefaultTableModel)tbl_listofstudents.getModel();
       
            list_dates.setModel(dlm);
            int listDatesSize = dlm.getSize();
            System.out.println(listDatesSize);
            String reportName;
            String secondReport;

            // validations
            if (cmb_trainer.getSelectedItem().toString().equalsIgnoreCase("Other")
                && txt_trainer.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Please Input Trainer's Name",
                    "Trainer field is empty", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (cmb_training_type.getSelectedIndex()==0
                && txt_company.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Please Input Company Name",
                    "Company field is empty", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // validation if there is a date inserted...
            if (listDatesSize>=1 && listDatesSize<=11){
                //                reportName = "C:\\Users\\OPTIPLEX\\Documents\\NetBeansProjects\\HSE_Application\\src\\hse_application\\reports\\hseReport_singleDate.jrxml";
                switch (listDatesSize) {

                    case 1: reportName = "/hse_application/reports/individual.jrxml";
                    break;
//                    case 2: reportName = "..\\HSE_Application\\src\\hse_application\\reports\\report2Dates.jrxml";
                    case 2: reportName = "/hse_application/reports/report2Dates.jrxml";
                    break;
                    default: reportName = "/hse_application/reports/individual.jrxml";
                    break;
                }
                
                System.out.println(reportName);
                
//                getClass().getResource("/hse_application/Icons/DefaultButtons/Signup.png")
                
                
                

                //Load the jasper design
                //                JasperDesign jd = JRXmlLoader.load(reportName);
                JasperDesign jd = JRXmlLoader.load(getClass().getResourceAsStream(reportName));

                //Query to get the desired output
                String getTrainingCode = cmb_trainingReference.getSelectedItem().toString();
                //                String query = "SELECT b.student_fullname, b.student_number, student_email FROM tbl_training_attendees a"
                //                        + " INNER JOIN tbl_student b ON a.student_ID = b.student_number"
                //                        + " WHERE a.training_id = '"+getTrainingCode+"'";
                //
                String query = "SELECT b.student_fullname, b.student_number, b.student_email FROM tbl_training_student a"
                + " INNER JOIN tbl_student b"
                + " ON a.fk_student_ID = b.student_id"
                + " WHERE a.fk_training_ID = '"+getTrainingCode+"'"
                + " ORDER BY b.student_fullname";
                
                

                JRDesignQuery query_value = new JRDesignQuery();
                query_value.setText(query);

                jd.setQuery(query_value);

                JasperReport jr = JasperCompileManager.compileReport(jd);

                Map<String, Object> params = new HashMap<String, Object>();

                list_dates.setModel(dlm);
                String dateToString = "";
                int size = dlm.getSize();

                for (int i = 0; i < size; i++){
                    dateToString = dateToString.concat(", "+dlm.getElementAt(i).toString());
                }
                // List of header parameters.
                String course;
                String thedate;

                // Fill the variables depending if corporate or individual training...
                course=txt_courses.getText(); // static
                params.put("CourseTitle", course);

                thedate = dlm.getElementAt(0).toString();
                params.put("AllTrainingDates", thedate);
                // BUNCH OF IF ELSE SHEETS
                //venueortime;
                if (cmb_training_type.getSelectedIndex()==0){
                    //venueortime=venue
                    params.put("VenueOrTime", "Venue: ");
                    if (cmb_venue.getSelectedItem()=="Other"){
                        params.put("Time", txt_venue.getText());
                    }else{
                        params.put("Time", cmb_venue.getSelectedItem().toString());
                    }
                    //company
                    params.put("CompanyOrTrainer", "Company: ");
                    params.put("TrainersName", txt_company.getText());

                    //trainer
                    params.put("TrainerOrVenue", "Trainer: ");
                    String trainername;
                    if (cmb_trainer.getSelectedItem()=="Other"){
                        trainername = txt_trainer.getText();
                    }else{
                        trainername = cmb_trainer.getSelectedItem().toString();
                    }

                    params.put("TrainingVenue", trainername);

                }else{
                    //time
                    params.put("VenueOrTime", "Time: ");

                    params.put("CompanyOrTrainer", "Trainer: ");
                    params.put("TrainerOrVenue", "Venue: ");

                    //time
                    params.put("Time", txt_time.getText());

                    //trainer
                    String trainername;
                    // check if the combobox selected is other
                    if (cmb_trainer.getSelectedItem()=="Other"){
                        trainername = txt_trainer.getText();
                    }else{
                        trainername = cmb_trainer.getSelectedItem().toString();
                    }

                    params.put("TrainersName", trainername);

                    //venue
                    if (cmb_venue.getSelectedItem()=="Other"){
                        params.put("TrainingVenue", txt_venue.getText());
                    }else{
                        params.put("TrainingVenue", cmb_venue.getSelectedItem().toString());
                    }

                }

                params.put("TrainingCode", getTrainingCode);
                //                params.put("AllTrainingDates", dateToString.trim().substring(1));
                params.put("TrainingDate", dlm.getElementAt(0));

                // If there are 2 sessions
                if (listDatesSize==2){
                    params.put("TrainingDate2", dlm.getElementAt(1));
                }

                //                // If there are 3 sessions
                //                if (listDatesSize==3){
                    //                    params.put("TrainingDate2", dlm.getElementAt(1));
                    //                    params.put("TrainingDate3", dlm.getElementAt(2));
                    //                }

                //                // if other, get the textfield value
                //                if (cmb_venue.getSelectedItem().equals("Other")){
                    //                    String venue = txt_venue.getText();
                    //                    params.put("TrainingVenue", venue);
                    //                }else{
                    //                    params.put("TrainingVenue", cmb_venue.getSelectedItem().toString());
                    //                }
                //
                //                // if other, get the textfield value
                //                if (cmb_training_type.getSelectedIndex()==0){
                    //                    params.put("CompanyName", txt_company.getText());
                    //                }else{
                    //                    params.put("Time", txt_time.getText());
                    //                }
                //
                //                // if other, get the textfield value
                //                if (cmb_trainer.getSelectedItem().equals("Other")){
                    //                    params.put("TrainersName", txt_trainer.getText());
                    //                }else{
                    //                    params.put("TrainersName", cmb_trainer.getSelectedItem().toString());
                    //                }

                JasperPrint jp = JasperFillManager.fillReport(jr, params, con);

                //                // Using the training code, set the filename and extension of file to be printed
                //                String filename = getTrainingCode+".pdf";
                //                // Export the file to pdf
                //                JasperExportManager.exportReportToPdfFile(secondReport, filename);
                //                // If supported, auto open it using the desktop's application
                //                if (Desktop.isDesktopSupported()) {
                    //                    try {
                        //                        File myFile = new File(filename);
                        //                        Desktop.getDesktop().open(myFile);
                        //                    } catch (IOException ex) {
                        //                        // no application registered for PDFs
                        //                    }
                    //                }

                if (listDatesSize>2 && listDatesSize<=11){

                    //                    if (listDatesSize==4){
                        //                        secondReport = "C:\\Users\\OPTIPLEX\\Documents\\NetBeansProjects\\HSE_Application\\"
                        //                                + "src\\hse_application\\reports\\individual_secondPage_4dates.jrxml";
                        //                        Print2Reports(secondReport, secondReport);
                        //                    }else if (listDatesSize==5){
                        //                        secondReport = "C:\\Users\\OPTIPLEX\\Documents\\NetBeansProjects\\HSE_Application\\"
                        //                                + "src\\hse_application\\reports\\individua                   //                    }

                    switch (listDatesSize) {
                        
//                        case 3: secondReport = "..\\HSE_Application\\src\\hse_application\\reports\\report4Dates_secondPage.jrxml";
                        case 3: secondReport = "/hse_application/reports/report4Dates_secondPage.jrxml";
                        break;
                        case 4: secondReport = "/hse_application/reports/report4Dates_secondPage.jrxml";
                        break;
                        case 5: secondReport = "/hse_application/reports/report5Dates_secondPage.jrxml";
                        break;
                        case 6: secondReport = "/hse_application/reports/report6Dates_secondPage.jrxml";
                        break;

                        default: secondReport = "/hse_application/reports/report6Dates_secondPage.jrxml";
                        break;
                    }

                    Print2Reports(secondReport, jp);

                }else{
                    // Using the training code, set the filename and extension of file to be printed
                    String filename = getTrainingCode+".pdf";
                    // Export the file to pdf
                    JasperExportManager.exportReportToPdfFile(jp, filename);
                    // If supported, auto open it using the desktop's application
                    if (Desktop.isDesktopSupported()) {
                        try {
                            File myFile = new File(filename);
                            Desktop.getDesktop().open(myFile);
                            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                        } catch (IOException ex) {
                            // no application registered for PDFs
                            JOptionPane.showMessageDialog(this, ex+"\nPlease close the opened file first");
                        }
                    }
                }
            }else if (listDatesSize>11){
                JOptionPane.showMessageDialog(this, "Number of sessions more than 11 is not yet supported.\nPlease contact the developer of this system to request");
            }else{
                JOptionPane.showMessageDialog(this, "Please Enter Dates",
                    "List of Dates Empty", JOptionPane.ERROR_MESSAGE);
            }

        }catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e+"\nPlease close the opened file first");
        }
    }
    
    private void Print2Reports(String report, JasperPrint firstReport){
        try {
            JasperDesign jd = JRXmlLoader.load(getClass().getResourceAsStream(report));
            
            
            //Query to get the desired output
            String getTrainingCode = cmb_trainingReference.getSelectedItem().toString();
            //                String query = "SELECT b.student_fullname, b.student_number, student_email FROM tbl_training_attendees a"
            //                        + " INNER JOIN tbl_student b ON a.student_ID = b.student_number"
            //                        + " WHERE a.training_id = '"+getTrainingCode+"'";
            //
            String query = "SELECT b.student_fullname, b.student_number, b.student_email FROM tbl_training_student a"
                    + " INNER JOIN tbl_student b"
                    + " ON a.fk_student_ID = b.student_id"
                    + " WHERE a.fk_training_ID = '"+getTrainingCode+"'"
                    + " ORDER BY b.student_fullname";
            JRDesignQuery query_value = new JRDesignQuery();
            query_value.setText(query);

            jd.setQuery(query_value);

            JasperReport jr = JasperCompileManager.compileReport(jd);

            Map<String, Object> params = new HashMap<String, Object>();
            params.put("CourseTitle", txt_courses.getText());

            list_dates.setModel(dlm);
            String dateToString = "";
            int size = dlm.getSize();

            
            String trainDate = "TrainingDate";  //Initialize for looping
            for (int i = 0; i < size; i++){
                dateToString = dateToString.concat("  "+dlm.getElementAt(i).toString());
//                int x = i + 1;
//                trainDate = "TrainingDate"+x;
//                params.put(trainDate, dlm.getElementAt(x));
            }
            //put the necessary parameters
//            params.put("TrainingDate", dateToString);
            String thedate;
            thedate = dlm.getElementAt(0).toString();
            params.put("AllTrainingDates", thedate);
            // BUNCH OF IF ELSE SHEETS
            ///////////////This block is for changing the labels of the header/////
            ////////////// Depending on the type of training (corporate / individual)
            //venueortime;
            if (cmb_training_type.getSelectedIndex()==0){
                //venueortime=venue
                params.put("VenueOrTime", "Venue: ");
                if (cmb_venue.getSelectedItem()=="Other"){
                    params.put("Time", txt_venue.getText());
                }else{
                    params.put("Time", cmb_venue.getSelectedItem().toString());
                }
                //company
                params.put("CompanyOrTrainer", "Company: ");
                params.put("TrainersName", txt_company.getText());

                //trainer
                params.put("TrainerOrVenue", "Trainer: ");
                String trainername;
                if (cmb_trainer.getSelectedItem()=="Other"){
                    trainername = txt_trainer.getText();
                }else{
                    trainername = cmb_trainer.getSelectedItem().toString();
                }

                params.put("TrainingVenue", trainername);

            }else{
                //time
                params.put("VenueOrTime", "Time: ");

                params.put("CompanyOrTrainer", "Trainer: ");
                params.put("TrainerOrVenue", "Venue: ");

                //time
                params.put("Time", txt_time.getText());


                //trainer
                String trainername;
                // check if the combobox selected is other
                if (cmb_trainer.getSelectedItem()=="Other"){
                    trainername = txt_trainer.getText();
                }else{
                    trainername = cmb_trainer.getSelectedItem().toString();
                }

                params.put("TrainersName", trainername);

                //venue
                if (cmb_venue.getSelectedItem()=="Other"){
                    params.put("TrainingVenue", txt_venue.getText());
                }else{
                    params.put("TrainingVenue", cmb_venue.getSelectedItem().toString());
                }

            }
            
     
            
            params.put("TrainingCode", getTrainingCode);
            params.put("TrainingDate2", dlm.getElementAt(1));
            params.put("TrainingDate3", dlm.getElementAt(2));
            if (size>=4){
                params.put("TrainingDate4", dlm.getElementAt(3).toString());
            }
            
            if (size>=5){
                params.put("TrainingDate5", dlm.getElementAt(4).toString());
            }
            
            if (size>=6){
                params.put("TrainingDate6", dlm.getElementAt(5).toString());
            }

            JasperPrint secondReport = JasperFillManager.fillReport(jr, params, con);
            
            // if the size is more than 6 and less than 11, print the third report
            if (size>6 && size<=11){
                
                String thirdReport = "/hse_application/reports/report10Dates_thirdPage.jrxml";
                Print3Reports(thirdReport, firstReport, secondReport);

            // else print the report
            }else{
                // Instantiate a list of jasperprints
                List<JasperPrint> jprintlist = new ArrayList<JasperPrint>();

                // Add the jasperPrint reports
                jprintlist.add(firstReport); //this is from the method
                jprintlist.add(secondReport);

                // Using the training code, set the filename and extension of file to be printed
                String filename = getTrainingCode+".pdf";


                JRExporter exporter = new JRPdfExporter(); // initialize the an exporter
                exporter.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jprintlist);
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename);

                exporter.exportReport();  // Export the file


                // auto open the file for printing
                if (Desktop.isDesktopSupported()) {
                    try {
                        File myFile = new File(filename);
                        Desktop.getDesktop().open(myFile);
                        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    } catch (IOException ex) {
                        // no application registered for PDFs
                    }
                }
            }

    
        } catch (JRException ex) {
            Exceptions.printStackTrace(ex);
            
            JOptionPane.showMessageDialog(this, ex+"\nPlease close the opened file first");
        }
    }
    
    
    
    private void Print3Reports(String report, JasperPrint firstReport, JasperPrint secondReport){
        try {
            JasperDesign jd = JRXmlLoader.load(getClass().getResourceAsStream(report));
            
            
            //Query to get the desired output
            String getTrainingCode = cmb_trainingReference.getSelectedItem().toString();
            //                String query = "SELECT b.student_fullname, b.student_number, student_email FROM tbl_training_attendees a"
            //                        + " INNER JOIN tbl_student b ON a.student_ID = b.student_number"
            //                        + " WHERE a.training_id = '"+getTrainingCode+"'";
            //
            String query = "SELECT b.student_fullname, b.student_number, b.student_email FROM tbl_training_student a"
                    + " INNER JOIN tbl_student b"
                    + " ON a.fk_student_ID = b.student_id"
                    + " WHERE a.fk_training_ID = '"+getTrainingCode+"'"
                    + " ORDER BY b.student_fullname";
            JRDesignQuery query_value = new JRDesignQuery();
            query_value.setText(query);

            jd.setQuery(query_value);

            JasperReport jr = JasperCompileManager.compileReport(jd);

            Map<String, Object> params = new HashMap<String, Object>();
            params.put("CourseTitle", txt_courses.getText());

            list_dates.setModel(dlm);
            String dateToString = "";
            int size = dlm.getSize();

            
            String trainDate = "TrainingDate";  //Initialize for looping
            for (int i = 0; i < size; i++){
                dateToString = dateToString.concat("  "+dlm.getElementAt(i).toString());
//                int x = i + 1;
//                trainDate = "TrainingDate"+x;
//                params.put(trainDate, dlm.getElementAt(x));
            }
            //put the necessary parameters

            String thedate;
            thedate = dlm.getElementAt(0).toString();
            params.put("AllTrainingDates", thedate);
            // BUNCH OF IF ELSE SHEETS
            //venueortime;
            
            ///////////////This block is for changing the labels of the header/////
            ////////////// Depending on the type of training (corporate / individual)
            if (cmb_training_type.getSelectedIndex()==0){
                //venueortime=venue
                params.put("VenueOrTime", "Venue: ");
                if (cmb_venue.getSelectedItem()=="Other"){
                    params.put("Time", txt_venue.getText());
                }else{
                    params.put("Time", cmb_venue.getSelectedItem().toString());
                }
                //company
                params.put("CompanyOrTrainer", "Company: ");
                params.put("TrainersName", txt_company.getText());

                //trainer
                params.put("TrainerOrVenue", "Trainer: ");
                String trainername;
                if (cmb_trainer.getSelectedItem()=="Other"){
                    trainername = txt_trainer.getText();
                }else{
                    trainername = cmb_trainer.getSelectedItem().toString();
                }

                params.put("TrainingVenue", trainername);

            }else{
                //time
                params.put("VenueOrTime", "Time: ");

                params.put("CompanyOrTrainer", "Trainer: ");
                params.put("TrainerOrVenue", "Venue: ");

                //time
                params.put("Time", txt_time.getText());


                //trainer
                String trainername;
                // check if the combobox selected is other
                if (cmb_trainer.getSelectedItem()=="Other"){
                    trainername = txt_trainer.getText();
                }else{
                    trainername = cmb_trainer.getSelectedItem().toString();
                }

                params.put("TrainersName", trainername);

                //venue
                if (cmb_venue.getSelectedItem()=="Other"){
                    params.put("TrainingVenue", txt_venue.getText());
                }else{
                    params.put("TrainingVenue", cmb_venue.getSelectedItem().toString());
                }

            }
            
     
            
            params.put("TrainingCode", getTrainingCode);
//            params.put("TrainingDate2", dlm.getElementAt(1));
//            params.put("TrainingDate3", dlm.getElementAt(2));
            if (size>=7){
                params.put("TrainingDate7", dlm.getElementAt(6).toString());
            }
            
            if (size>=8){
                params.put("TrainingDate8", dlm.getElementAt(7).toString());
            }
            
            if (size>=9){
                params.put("TrainingDate9", dlm.getElementAt(8).toString());
            }
            
            if (size>=10){
                params.put("TrainingDate10", dlm.getElementAt(9).toString());
            }
            
            if (size==11){
                params.put("TrainingDate11", dlm.getElementAt(10).toString());
            }
  
            JasperPrint thirdReport = JasperFillManager.fillReport(jr, params, con);
            
            
            List<JasperPrint> jprintlist = new ArrayList<JasperPrint>();

                // Add the jasperPrint reports
            jprintlist.add(firstReport); //this is from the method
            jprintlist.add(secondReport);
            jprintlist.add(thirdReport);

            // Using the training code, set the filename and extension of file to be printed
            String filename = getTrainingCode+".pdf";


            JRExporter exporter = new JRPdfExporter(); // initialize the an exporter
            exporter.setParameter(JRExporterParameter.JASPER_PRINT_LIST, jprintlist);
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, filename);

            exporter.exportReport();  // Export the file


            // auto open the file for printing
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File(filename);
                    Desktop.getDesktop().open(myFile);
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                } catch (IOException ex) {
                    // no application registered for PDFs
                }
            }
            
            
            
        }catch (Exception e){
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(attendanceClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(attendanceClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(attendanceClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(attendanceClass.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new attendanceClass().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup StatusGroup;
    private javax.swing.JComboBox<String> cmb_trainer;
    private javax.swing.JComboBox<String> cmb_trainingReference;
    private javax.swing.JComboBox<String> cmb_training_type;
    private javax.swing.JComboBox<String> cmb_venue;
    private javax.swing.JButton delete;
    private javax.swing.JPanel header;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private javax.swing.JLabel label;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JList<String> list_dates;
    private javax.swing.JList<String> list_dates1;
    private javax.swing.JRadioButton radio_pending;
    private javax.swing.JTable tbl_listofstudents;
    private javax.swing.JTextField txt_company;
    private javax.swing.JTextField txt_courses;
    private javax.swing.JLabel txt_startDate;
    private javax.swing.JTextField txt_time;
    private javax.swing.JTextField txt_trainer;
    private javax.swing.JTextField txt_venue;
    // End of variables declaration//GEN-END:variables
}

